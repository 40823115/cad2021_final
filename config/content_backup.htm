<h1>About</h1>
<p>Repository: <a href="https://github.com/mdecourse/cad2021_final">https://github.com/mdecourse/cad2021_final</a></p>
<p>Github Pages: <a href="https://mde.tw/cad2021_final">https://mde.tw/cad2021_final</a></p>
<p>Discussion: <a href="https://github.com/mdecourse/cad2021_final/discussions">https://github.com/mdecourse/cad2021_final/discussions</a></p>
<p>課程網站: <a href="https://mde.tw/cad2021">https://mde.tw/cad2021</a></p>
<p>作業網站: <a href="https://mde.tw/cad2021_hw">https://mde.tw/cad2021_hw</a></p>
<p>指定 HW1: <a href="https://mde.tw/cad2021_hw/content/HW1.html">https://mde.tw/cad2021_hw/content/HW1.html</a></p>
<p style="padding-left: 30px;">2b CAD 套件分配結果: <a href="https://mde.tw/cad2021/downloads/online/2b_hw1_cad.txt">https://mde.tw/cad2021/downloads/online/2b_hw1_cad.txt</a></p>
<p style="padding-left: 30px;">2a CAD 套件分配結果: <a href="https://mde.tw/cad2021/downloads/online/2a_hw1_cad.txt">https://mde.tw/cad2021/downloads/online/2a_hw1_cad.txt</a></p>
<p>隨機從 2a 學員名單中<a href="https://mde.tw/cad2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/b11a88a98655d41055c47f08fe94788f/raw/e174db2172e2afb768f428282ac22901596c2914/cad2021_2a_random_select.py" rel="nofollow">取出 10 個網站</a>進行查核 (<a href="https://mde.tw/cad2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/b11a88a98655d41055c47f08fe94788f/raw/d3c0f7e6ff632b14e98aad9a218425e7b49be160/cad2021_2a_list.py">2a repo and www list</a>)</p>
<p>隨機從 2b 學員名單中<a href="https://mde.tw/cad2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/b11a88a98655d41055c47f08fe94788f/raw/e174db2172e2afb768f428282ac22901596c2914/cad2021_2b_random_select.py" rel="nofollow">取出 10 個網站</a>進行查核 (<a href="https://mde.tw/cad2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/b11a88a98655d41055c47f08fe94788f/raw/e174db2172e2afb768f428282ac22901596c2914/cad2021_2b_list.py">2b repo and www list</a>)</p>
<h1>Final Project</h1>
<h4 dir="auto">cad2021 Final Project</h4>
<h4 dir="auto">電腦輔助設計實習期末學習驗證與評分網站</h4>
<p dir="auto"><a href="http://mde.tw/cad2021_final" rel="nofollow">http://mde.tw/cad2021_final</a></p>
<p dir="auto">倉儲: <a href="https://github.com/mdecourse/cad2021_final">https://github.com/mdecourse/cad2021_final</a></p>
<p dir="auto">本網站自 2021.12.27 起收集各班各分組成員在本學期各項作業與期末專案所完成的成果, 並藉此進行學員的課程學期成績評分.</p>
<p dir="auto">各班之分組依據 <a href="https://mde.tw/cad2021_hw/content/W7%20%E5%88%86%E7%B5%84.html" rel="nofollow">Ｗ7 時自選組員之分組結果</a>.</p>
<h4 dir="auto">W7 分組結果:</h4>
<p dir="auto">2a 總修課人數: 56 = 7x8 表示每組 7 人, 可分為 8 組.</p>
<p dir="auto">2b 總修課人數: 66 = 7x9 + 3 表示有三組可以 8 人一組.</p>
<p dir="auto">W14 參與分組總人數:</p>
<p dir="auto">2a 修課人數: 55 人, 仍分為 8 組. H1 標題為 2a, H2 為 2ag1 ~ 2ag8, 各組員以學號為標題, 依學號遞減排列, 設為 H3 頁面, 各學員則將課程學習成果呈現在各自的 H3 頁面中, 並以 Pull Requests 方式提出拉回合併之請求.</p>
<p dir="auto">2b 修課人數: 64 人, 仍分為 9 組. H1 標題為 2b, H2 為 2bg1 ~ 2bg9, 各組員以學號為標題, 依學號遞減排列, 設為 H3 頁面, 各學員則將課程學習成果呈現在各自的 H3 頁面中, 並以 Pull Requests 方式提出拉回合併之請求.</p>
<h1>Notice</h1>
<p>各組必須先自願或推舉出一位組長與一位副組長負責成為 <a href="https://github.com/mdecourse/cad2021_final">https://github.com/mdecourse/cad2021_final</a>  倉儲的管理雙人組, 組長將設為期末倉儲的管理協同者, 擁有合併或拒絕 Pull Requests 的權限, 各組推選出兩位管理學員後, 請將學號登錄至 <a href="https://github.com/mdecourse/cad2021_final/discussions/2">https://github.com/mdecourse/cad2021_final/discussions/2</a></p>
<p>各學員利用 Pull Requests 將個人的期末評分內容放入本網站的流程:</p>
<ol>
<li>登入自己的 Github 帳號.</li>
<li>fork <a href="https://github.com/mdecourse/cad2021_final">https://github.com/mdecourse/cad2021_final</a> 倉儲到自己的帳號下</li>
<li>將自己帳號下的 cad2021_final  倉儲以 git clone --recurse-submodules url 到近端進行改版.</li>
<li>改版後, 在自己帳號下對 cad2021_final 倉儲提交並推送新版本後, 必須在自季的 cad2021_final 倉儲處建立 Pull Request 後, 請組長與副組長查驗合併後內容無誤後, 且合併至主倉儲與 <a href="https://mde.tw/cad2021_final">https://mde.tw/cad2021_final</a> 網頁中.</li>
<li>若各組員進行 fork 後, <a href="https://github.com/mdecourse/cad2021_final">https://github.com/mdecourse/cad2021_final</a> 倉儲已經被其他組員多次改版, 則該組員必須採用反向 Pull Requests, 將自己帳號下的 cad2021_final 倉儲的版本儘量接近之後處理 Pull Requests 時的 cad2021_final 倉儲版本, 以降低各組組員最後進行 Pull Requests 合併時處理衝突的難度.</li>
<li>各組組長與副組長接到組員已經完成特定階段新增的 Pull Requests 後, 必須設法將其版本內容合併至期末評分網站中.</li>
</ol>
<h1>2a</h1>
<h2>demo</h2>
<h3>scrum-1</h3>
<p>CAD1 指各學員所分配到的第一套參數式 CAD 套件, 其中包括 Solidworks, Inventor, NX, Onshape 與 Solvespace.</p>
<p>CAD1 將使用 Solvespace 執行零件繪圖.</p>
<h4>有關 Solvespace</h4>
<p>2013.06 Solvespace 1.9 移除限制, <a href="https://web.archive.org/web/20130719042128/http://solvespace.com/index.pl">轉為 Freeware</a>.</p>
<p>2013.09 Solvespace 2.0 提供下載原始碼. <a href="https://web.archive.org/web/20130911213309/http://solvespace.com/download.pl">轉為 GPLv3 free software</a>.</p>
<p>2013.12 Solvespace 2.0 正式宣布<a href="https://web.archive.org/web/20131212120216/http://solvespace.com/index.pl">轉為 GPL free software</a>.</p>
<p>從 <a href="https://solvespace.com/forum.pl?action=viewall">https://solvespace.com/forum.pl?action=viewall</a> 列出從 2013.09 Forum 啟用後的所有討論串.</p>
<p>Solvespace 原始碼: <a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p>
<h4>編譯 Solvespace</h4>
<p>在 Windows 10 64 位元環境中編譯 Solvespace, 可以下載 <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (檔案大小 4 GB, 解開壓縮後 14 GB) 後啟動可攜程式系統. 以 git clone --recurse-submodules <a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> 取得原始碼.</p>
<p>cd solvespace 後以 mkdir build 建立 build 目錄, 然後 cd build 進入 build 目錄. 先執行:</p>
<p style="padding-left: 30px;">cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>接著再執行:</p>
<p style="padding-left: 30px;">mingw32-make</p>
<p>就可以完成 solvespace.exe 的編譯.</p>
<p>執行這裡利用 MSYS2 所編譯的 solvespace.exe, 必須從 Y:\msys64_20210419\mingw64\bin 目錄複製 libwinpthread-1.dll 檔案, 與 solvespace.exe 放在同一目錄中, 就可以啟動 solvespace.exe.</p>
<p>以 MSYS2 編譯 Solvespace 的 log 請參考: <a href="/downloads/compile_solvespace_log.txt">compile_solvespace_log.txt</a></p>
<h4>初步 2D 機構分析與基座組立</h4>
<p></p>
<p><img alt="" height="352" src="https://mde.tw/cad2021_hw/images/solvespace_meArm_2d.png" width="600"/></p>
<p><img caption="false" height="353" src="https://mde.tw/cad2021_hw/images/solvespace_meArm_2d_w_base_and_frame.png" width="600"/></p>
<p>上列 2D 機構分析與零組件下載: <a href="https://mde.tw/cad2021_hw/downloads/hw1_solvespace_stage1.7z">hw1_solvespace_stage1.7z</a></p>
<p><img alt="" height="348" src="/images/solvespace_meArm_one_more_joint.png" width="600"/></p>
<p><img alt="" height="305" src="/images/coppeliaSim_solvespace_one_more_joint.png" width="600"/></p>
<p><a href="/downloads/meArm_solvespace_coppeliasim_stage2.zip">meArm_in_solvespace_and_coppeliasim_stage2.zip</a></p>
<p><img alt="" height="368" src="/images/meArm_in_solvespace.png" width="600"/></p>
<p><a href="/downloads/meArm_in_solvespace.7z">meArm_in_solvespace.7z</a></p>
<p><img alt="" height="323" src="/images/meArm_in_solvespacce_coppeliasim.png" width="600"/></p>
<p><a href="/downloads/meArm_in_solvespace_coppeliasim.7z">meArm_in_solvespace_coppeliasim.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5NsxA3g2HaI" title="YouTube video player" width="560"></iframe></p>
<p>接下來可以透過 sympy 以符號式運算求解逆向運動方程式:</p>
<p>利用 <a href="https://www.sympy.org">sympy</a> 根據 <a href="https://mde.tw/cad2021/downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf">meArm Pi Technical Overview</a> 中的說明 (修正錯誤後), 解出 Inverse Kinematics 如下:</p>
<p>當已知 manimpulator 端點的座標為 (x, y ,z) 時, 求 theta, ltheta (low arm link theta) 與 utheta (upper arm link theta). 利用 <a href="https://www.sympy.org">sympy</a> 之前必須先以 pip install sympy 安裝模組.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sympy as sp
 
# Define symbols
theta, ltheta, utheta, r, x, y, z = sp.symbols("theta ltheta utheta r x y z")
 
# Define equations, rearranged so expressions equal 0
eq1 = 15 + 50 + 80*sp.sin(ltheta) + 80*sp.sin(utheta) - r
eq2 = 53 + 80*sp.cos(ltheta) - 80*sp.cos(utheta) - z
# 從 eq3 與 eq4 可以得到 eq5 與 eq6, 將 r 及 theta 表示成 x, y 輸入的函式
# 因此 r 與 theta 在得知 x, y, z 時就可視為已知
eq3 = r*sp.cos(theta) - x
eq4 = r*sp.sin(theta) - y
eq5 = sp.sqrt(x*x + y*y) - r
eq6 = sp.atan(y/x) - theta
 
# Solve for theta1 &amp; theta3
solution = sp.solve([eq1, eq2], [ltheta, utheta], dict=True)
print(solution)
 
'''
[{ltheta: pi - asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
 
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16) + pi, 
 
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: -asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16), 
 
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
 
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}]
'''</pre>
<p>使用者可以設法在 CoppeliaSim meArm 場景中驗證上述推導是否正確 (這是很好的課堂即時驗證題目) 並與 <a href="https://github.com/yorkhackspace/meArm">https://github.com/yorkhackspace/meArm</a> 中的控制運算進行比較.</p>
<h3>scrum-2</h3>
<p>CAD1 指各學員所分配到的第一套參數式 CAD 套件, 其中包括 Solidworks, Inventor, NX, Onshape 與 Solvespace.</p>
<p>CAD1 將使用 Solvespace 執行零件繪圖.</p>
<h4>有關 Solvespace</h4>
<p>2013.06 Solvespace 1.9 移除限制, <a href="https://web.archive.org/web/20130719042128/http://solvespace.com/index.pl">轉為 Freeware</a>.</p>
<p>2013.09 Solvespace 2.0 提供下載原始碼. <a href="https://web.archive.org/web/20130911213309/http://solvespace.com/download.pl">轉為 GPLv3 free software</a>.</p>
<p>2013.12 Solvespace 2.0 正式宣布<a href="https://web.archive.org/web/20131212120216/http://solvespace.com/index.pl">轉為 GPL free software</a>.</p>
<p>從 <a href="https://solvespace.com/forum.pl?action=viewall">https://solvespace.com/forum.pl?action=viewall</a> 列出從 2013.09 Forum 啟用後的所有討論串.</p>
<p>Solvespace 原始碼: <a href="https://github.com/solvespace/solvespace">https://github.com/solvespace/solvespace</a></p>
<h4>編譯 Solvespace</h4>
<p>在 Windows 10 64 位元環境中編譯 Solvespace, 可以下載 <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (檔案大小 4 GB, 解開壓縮後 14 GB) 後啟動可攜程式系統. 以 git clone --recurse-submodules <a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a> 取得原始碼.</p>
<p>cd solvespace 後以 mkdir build 建立 build 目錄, 然後 cd build 進入 build 目錄. 先執行:</p>
<p style="padding-left: 30px;">cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>接著再執行:</p>
<p style="padding-left: 30px;">mingw32-make</p>
<p>就可以完成 solvespace.exe 的編譯.</p>
<p>執行這裡利用 MSYS2 所編譯的 solvespace.exe, 必須從 Y:\msys64_20210419\mingw64\bin 目錄複製 libwinpthread-1.dll 檔案, 與 solvespace.exe 放在同一目錄中, 就可以啟動 solvespace.exe.</p>
<p>以 MSYS2 編譯 Solvespace 的 log 請參考: <a href="/downloads/compile_solvespace_log.txt">compile_solvespace_log.txt</a></p>
<h4>初步 2D 機構分析與基座組立</h4>
<p></p>
<p><img alt="" height="352" src="https://mde.tw/cad2021_hw/images/solvespace_meArm_2d.png" width="600"/></p>
<p><img caption="false" height="353" src="https://mde.tw/cad2021_hw/images/solvespace_meArm_2d_w_base_and_frame.png" width="600"/></p>
<p>上列 2D 機構分析與零組件下載: <a href="https://mde.tw/cad2021_hw/downloads/hw1_solvespace_stage1.7z">hw1_solvespace_stage1.7z</a></p>
<p><img caption="false" height="348" src="https://mde.tw/cad2021_hw/images/solvespace_meArm_one_more_joint.png" width="600"/></p>
<p><img caption="false" height="305" src="https://mde.tw/cad2021_hw/images/coppeliaSim_solvespace_one_more_joint.png" width="600"/></p>
<p><a href="/downloads/meArm_solvespace_coppeliasim_stage2.zip">meArm_in_solvespace_and_coppeliasim_stage2.zip</a></p>
<p><img caption="false" height="368" src="https://mde.tw/cad2021_hw/images/meArm_in_solvespace.png" width="600"/></p>
<p><a href="/downloads/meArm_in_solvespace.7z">meArm_in_solvespace.7z</a></p>
<p><img caption="false" height="323" src="https://mde.tw/cad2021_hw/images/meArm_in_solvespacce_coppeliasim.png" width="600"/></p>
<p><a href="/downloads/meArm_in_solvespace_coppeliasim.7z">meArm_in_solvespace_coppeliasim.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5NsxA3g2HaI" title="YouTube video player" width="560"></iframe></p>
<p>接下來可以透過 sympy 以符號式運算求解逆向運動方程式:</p>
<p>利用 <a href="https://www.sympy.org">sympy</a> 根據 <a href="https://mde.tw/cad2021/downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf">meArm Pi Technical Overview</a> 中的說明 (修正錯誤後), 解出 Inverse Kinematics 如下:</p>
<p>當已知 manimpulator 端點的座標為 (x, y ,z) 時, 求 theta, ltheta (low arm link theta) 與 utheta (upper arm link theta). 利用 <a href="https://www.sympy.org">sympy</a> 之前必須先以 pip install sympy 安裝模組.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sympy as sp
 
# Define symbols
theta, ltheta, utheta, r, x, y, z = sp.symbols("theta ltheta utheta r x y z")
 
# Define equations, rearranged so expressions equal 0
eq1 = 15 + 50 + 80*sp.sin(ltheta) + 80*sp.sin(utheta) - r
eq2 = 53 + 80*sp.cos(ltheta) - 80*sp.cos(utheta) - z
# 從 eq3 與 eq4 可以得到 eq5 與 eq6, 將 r 及 theta 表示成 x, y 輸入的函式
# 因此 r 與 theta 在得知 x, y, z 時就可視為已知
eq3 = r*sp.cos(theta) - x
eq4 = r*sp.sin(theta) - y
eq5 = sp.sqrt(x*x + y*y) - r
eq6 = sp.atan(y/x) - theta
 
# Solve for theta1 &amp; theta3
solution = sp.solve([eq1, eq2], [ltheta, utheta], dict=True)
print(solution)
 
'''
[{ltheta: pi - asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
 
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16) + pi, 
 
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: -asin(-r/80 + sin(2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) + 13/16), 
 
utheta: 2*atan((160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) - 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}, 
 
{ltheta: asin(r/80 + sin(2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))) - 13/16), 
 
utheta: -2*atan((-160*r + sqrt(-r**4 + 260*r**3 - 2*r**2*z**2 + 212*r**2*z - 5368*r**2 + 260*r*z**2 - 27560*r*z - 1499160*r - z**4 + 212*z**3 + 296*z**2 - 1222392*z + 130593244) + 10400)/(r**2 - 130*r + z**2 - 266*z + 15514))}]
'''</pre>
<p>使用者可以設法在 CoppeliaSim meArm 場景中驗證上述推導是否正確 (這是很好的課堂即時驗證題目) 並與 <a href="https://github.com/yorkhackspace/meArm">https://github.com/yorkhackspace/meArm</a> 中的控制運算進行比較.</p>
<h2>2ag1</h2>
<h2>2ag2</h2>
<h2>2ag3</h2>
<h3>40923148</h3>
<p dir="auto">請在個人的 cad2021_hw 網站中的 HW1 最下方新增一個 H2 的頁面, 標題為 W13 (W 為大寫), 主要查驗個人 meArm 作業所完成的項目:</p>
<ol dir="auto">
<li>
<p dir="auto">請建立一個 Wink 檔案說明截至目前所完成的兩套 CAD 零組件繪圖進度 (30%).</p>
sw已經做好零件繪製也組立完成，但nx還沒全部畫完，所以wink沒有製作完全。</li>
<li>
<p dir="auto">請建立一個 Wink 檔案, 將 1. 已經完成的 meArm 機械手臂臂第一軸, 加入<span> </span><a href="https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm" rel="nofollow">https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm</a><span> </span>slider, 可以在執行時, 利用滑鼠拖動旋轉 360 度 (30%).</p>
還無法成功使第一軸旋轉，所以還每有製作wink。</li>
<li>
<p dir="auto">請建立一個 Wink 檔案, 將 1. 已經完成的 meArm 機械手臂其中的 1 ~ 3 軸 (夾爪除外), 加入 UI 介面 slider, 可以在執行十, 利用滑鼠拖動在各軸的極限位置旋轉 (40%).</p>
2未完成故無第三</li>
<li>
<p dir="auto">完成後請將個人網頁 w13 連結登錄在下列回應, 並簡要說明上課至今的心得.</p>
</li>
</ol>
<p>零件:</p>
<p><a href="https://drive.google.com/drive/folders/1K5uefYJjCmvRgr2GscDNHck2y8jhL-0d?usp=sharing">https://drive.google.com/drive/folders/1K5uefYJjCmvRgr2GscDNHck2y8jhL-0d?usp=sharing</a></p>
<h4>組立</h4>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<div class="winkVideoContainerClass"><video class="winkVideoClass" data-dirname="/static" data-varname="winkVideoData" height="756" width="1344">
<source src="./../downloads/me.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h2>2ag4</h2>
<h3>40923129</h3>
<h3>40923111</h3>
<h3>40923114</h3>
<h3>40923115</h3>
<p>1.這學期學習了兩套新的cad軟體，分別是sw、solvespace，在畫圖上已經大致清楚，但solvespace的組合零件的功能要再多多練習。</p>
<p><img alt="" height="346" src="/images/chrome_UwaKALn870.png" width="906"/></p>
<p><span>2.學習新的工具wink可以把自己做事的內容截成小短片，方便紀錄也比較有動態感。</span></p>
<p><span><img alt="" height="360" src="/images/chrome_HSeRGi0HUm.png" width="664"/></span></p>
<p><span>3.coppeliasim學了coppeliasim，如何使用這個軟體來模擬畫出來四連桿的運動過程。</span></p><h3>40923116</h3>
<p>推送test</p><h3>40923122</h3>
<h3>40923146</h3>
<h2>2ag5</h2>
<h2>2ag6</h2>
<h2>2ag7</h2>
<h2>2ag8</h2>
<h1>2b</h1>
<h2>2bg1</h2>
<h2>2bg2</h2>
<h2>2bg3</h2>
<h2>2bg4</h2>
<h2>2bg5</h2>
<h2>2bg6</h2>
<h2>2bg7</h2>
<h2>2bg8</h2>
<h2>2bg9</h2>
<h3>40823117</h3>
<p>CAD1(INV) 緣起說明與介紹</p>
<p>Inventor是美國AutoDesk公司推出的三圍可視化實體模擬軟體，在AutoCAD平台開發的二維機械製圖和詳圖軟體AutoCAD Mechanical基礎上，加入了用於纜線和束線設計、管道設系和PCB IDF檔案輸入的專業功能模組，並加入FEA功能，可以直接Inventor中進行應力分析。<br/>Inventor提供了二維轉換到三維最簡單的路徑，且提供最佳的DWG兼容性，Invnetor提供了全面的設計工具，可用於創建完整的數字樣機，以驗證設計的外型、結構及功能。</p>
<p>CAD1(INV) 安裝配置</p>
<p></p>
<p>Inventor註冊下載:<a href="https://youtu.be/JPvTzNmna7g">https://youtu.be/JPvTzNmna7g</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/JPvTzNmna7g" title="YouTube video player" width="560"></iframe></p>
<p>CAD1(INV) 零組件繪圖操作流程影片 (Youtube)</p>
<p></p>
<p>Inventor繪圖教學:<a href="https://youtu.be/BVBxhxRFIJw">https://youtu.be/BVBxhxRFIJw</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/BVBxhxRFIJw" title="YouTube video player" width="560"></iframe></p>
<p>CAD2(ONS) 緣起說明與介紹</p>
<p>Onshape的創始人Jon Hirschtick，在1993年創辦了Solidworks，在1997年時被達梭系統以3.1億美元收購，Jon Hirschtick在2011年離開Solidworks並在2012年成立公司開始創建Onshape。</p>
<p>1.Onshape為免費軟體，不需購買授權即可使用。<br/>2.支援瀏覽器操作，並有IOS、Android軟體支援。<br/>3.可輸出圖檔供CNC、3D列印、雷射切割使用。</p>
<p></p>
<p><span>CAD2(ONS)</span> 安裝配置</p>
<p></p>
<p>Onshape註冊教學:<a href="https://youtu.be/toQO4diaIGA">https://youtu.be/toQO4diaIGA</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/toQO4diaIGA" title="YouTube video player" width="560"></iframe><span><br/></span></p>
<p><span>CAD2(ONS)</span> 零組件繪圖操作流程影片 (Youtube)</p>
<p></p>
<p>Onshape繪圖教學:<a href="https://youtu.be/179TUSG2Lso">https://youtu.be/179TUSG2Lso</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/179TUSG2Lso" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>轉入coppeliasim</p>
<p></p>
<p>CAD1(INV)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Y_5jcqxE9R0" title="YouTube video player" width="560"></iframe></p>
<p>HW1結果</p>
<p>CAD1(INV)</p>
<p><img caption="false" height="223" src="https://pyc40823117.github.io/cad2021_hw/images/messageImage_1640831957896.jpg" width="263"/></p>
<p>轉動第一軸</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/whmyDeVSrv0" title="YouTube video player" width="560"></iframe></p>
<p>轉動1~3軸</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/1S6FEAdxTgw" title="YouTube video player" width="560"></iframe></p>