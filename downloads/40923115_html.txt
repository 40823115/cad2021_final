<h3>40923115</h3>
<p>final2</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>// <![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
// ]]></script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">// <![CDATA[
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
// ]]></script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">// <![CDATA[
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/jason60714/cbe9220a02b265113a6b75cd60310246/raw/18413b6a430c85ecc67ee8999669c2ccc223d7d7/final2"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'_name_':'_main_'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
// ]]></script>
</p>
<div id="brython_div"></div>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p>!-- 存擋表單開始 --&gt;</p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text">.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console" style="margin: 0px; width: 485px; height: 195px;"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<div style="width: 100%; height: 100%;"></div>
<p>------------------------------------------------------------------------------------------</p>
<p>------------------------------------------------------------------------------------------</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>// <![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
// ]]></script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script type="text/javascript" src="/static/ace/FileSaver.min.js"></script>
<script type="text/javascript" src="/static/ace/filereader.js"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script type="text/javascript" src="/static/ace/ace.js"></script>
<script type="text/javascript" src="/static/ace/ext-language_tools.js"></script>
<script type="text/javascript" src="/static/ace/mode-python3.js"></script>
<script type="text/javascript" src="/static/ace/snippets/python.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">// <![CDATA[
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
// ]]></script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">// <![CDATA[
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
        # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = " https://gist.githubusercontent.com/jason60714/3140695e30bc08f7180898169f9ded4b/raw/6c5b2e5b73b5c19987472a871d1ed0e187164c2b/W13"
    prog = open(url).read()


    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()


check_strq_url = " https://gist.githubusercontent.com/jason60714/3140695e30bc08f7180898169f9ded4b/raw/6c5b2e5b73b5c19987472a871d1ed0e187164c2b/W13"
# 從 gist 取得程式碼
check_srcq = open(check_strq_url).read()


def checkq_input(ev):
    Ace.editor.setValue(check_srcq)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    #Ace.run()


# id 為 "add1to10" 的按鈕點按時, 執行 check_input 方法
doc["add1to10"].bind('click', checkq_input)


chec_qwe_url = " https://gist.githubusercontent.com/jason60714/38e19d02166eedb13819ea6056b06924/raw/a79e0b7bf490d56f15915d76594733c39041500a/%25E8%25A1%25A8%25E6%25A0%25BC%25E8%25B7%2591%25E6%2595%25B8"
# 從 gist 取得程式碼
chec_wq = open(chec_qwe_url).read()


def chec_inp(ev):
    Ace.editor.setValue(chec_wq)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    #Ace.run()


# id 為 "final2" 的按鈕點按時, 執行 check_input 方法
doc["final2"].bind('click', checkq_input)


final2url = " https://gist.githubusercontent.com/jason60714/cbe9220a02b265113a6b75cd60310246/raw/18413b6a430c85ecc67ee8999669c2ccc223d7d7/final2"
# 從 gist 取得程式碼
check_final2 = open(final2url).read()


def chec_inp(ev):
    Ace.editor.setValue(chec_wq)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    #Ace.run()


# id 為 "asd" 的按鈕點按時, 執行 chec_inp 方法
doc["asd"].bind('click', chec_inp)


zxc_url = " https://gist.githubusercontent.com/jason60714/f434d43d056dc8dd4ee31041abf6d82f/raw/ebd14b5c2cd32545fd08f292568305f463be2a47/%25E6%25A0%25BC%25E5%25AD%2590%25E6%2596%25B9%25E5%25A1%258A"
# 從 gist 取得程式碼
check_zxc= open(zxc_url).read()


def zxc_input(ev):
    Ace.editor.setValue(check_zxc)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    #Ace.run()


# id 為 "zxc" 的按鈕點按時, 執行 zxc_input 方法
doc["zxc"].bind('click', zxc_input)


# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
// ]]></script>
</p>
<p>
<script type="text/python3">// <![CDATA[
import beditor
from browser import document
url = " https://gist.githubusercontent.com/jason60714/5172a8745763adbb88af94c635fa956b/raw/c9e8a6b08f2fc80f0bba8e0939c582705fc8cc8a/snake%2520abc"
src = open(url).read()
w13 = beditor.editor(src, "kw_editor", "kw_console", "kw__container", "kw_py_src")
document["w13"].bind("click", w13.prog)
// ]]></script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text">.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><button id="add1to10">列出10個座標</button> <button id="asd">在方格上標出10個座標</button> <button id="zxc">方塊隨機出現</button> <button id="w13">snake</button></p>
<p><button> <!-- 執行與清除按鈕結束 --></button></p>
<p></p>
<p><button><!-- 程式執行 ouput 區 --></button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><button><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></button></p>